#include <stdio.h>
#include <stdlib.h>
#include <math.h>

struct triangle
{
	int a;
	int b;
	int c;
};

typedef struct triangle triangle;

void swap_int(int* a,int* b)
{   
    int temp;
    temp = *a;
    *a = *b;
    *b = temp;

}
void swap(float* a,float* b)
{   
    float temp;
    temp = *a;
    *a = *b;
    *b = temp;

}
void shorting(float* area,int n)
{
    for(int i=0;i<(n-1);i++) //sorting an array
    {
        for(int j=(i+1);j<n;j++)
        {
            if(area[i]>area[j])
            {
                swap(&area[i],&area[j]);
            }
        }
    }
/*
    printf("\n area = ");
    for(int i=0; i<n; i++)
    {
        printf("%d  ",area[i]);
    }
*/
}
float tri_area(double a,double b,double c)
{   
    double area,p;
 
    p = (a+b+c)/2;
    area = sqrt(p*(p-a)*(p-b)*(p-c));
    return area;
}

int Constraints(triangle* tr, int n) 
{
    int flag = 1;
    if(1<=n && n<=100) // 1rd Constraints satisfy
    {
        for(int i=0; i<n; i++)
        {
            if((1<=tr[i].a && tr[i].a<=70) && (1<=tr[i].b && tr[i].b<=70) && (1<=tr[i].c && tr[i].c<=70)) // 2rd Constraints satisfy
            {
                if((tr[i].a+tr[i].b > tr[i].c) && (tr[i].b+tr[i].c > tr[i].a) && (tr[i].c+tr[i].a > tr[i].b)) // 3rd Constraint  satisfy
                {
                    if(flag == 1)
                    {
                        flag =1; // if satisfy some cond. then also wait for all conditions satisfication.
                        //printf("\n%d is triangle. ",i+1);
                        //printf(": %d,%d,%d",tr[i].a,tr[i].b,tr[i].c); 
                    }
                    
                }
                else
                {
                    flag = 0; //any one cond. false then immidiatly return 0; 
                    //printf("\n%d is not triangle. ",i+1);
                    //printf(": %d,%d,%d",tr[i].a,tr[i].b,tr[i].c);  
                }
                
            }
            else
            {
                flag =  0;
                //printf("\n%d is not triangle. ",i+1);
                //printf(": %d,%d,%d",tr[i].a,tr[i].b,tr[i].c);
            }
        }
    }
    else
    {
        flag = 0;
        //printf("\ncond for n is not satisfy ");
    }
    return flag;
}

void sort_by_area(triangle* tr, int n) 
{
    
    /**
    * Sort an array a of the length n
    */
    if( Constraints( tr, n) == 1) // for Constraints
    {

        float *area;

        area = (float*)calloc(n,sizeof(float));

        for(int i=0; i<n; i++)
        {
            area[i] = tri_area(tr[i].a,tr[i].b,tr[i].c);
        }
/*    
    printf("\n dimensions = ");
    for (int i = 0; i < n; i++)
    {
        printf("%d %d %d\n", tr[i].a, tr[i].b, tr[i].c);
    }
 */  
/*       printf("\n before short area = ");
        for (int i = 0; i < n; i++)
        {
            printf("%.2f, ", area[i]);
        }
        printf("\n");
*/
        shorting(area,n);
/*        
        printf("\n after short area = ");
        for (int i = 0; i < n; i++)
        {
            printf("%.2f, ", area[i]);
        }
        printf("\n");
*/
        for(int i=0; i<n-1; i++) // arrange a,b,c according to area wise
        {
        
            for(int j=0;j<n;j++)
            {
                //printf("only i, j = %d%d ",i,j);
                
                if(area[i] == tri_area(tr[j].a,tr[j].b,tr[j].c))
                {
                    //printf("\n area(%f) == sqrt(p*(p-tr[j].a)*(p-tr[j].b)*(p-tr[j].c))(%f)\n",area[i], tri_area(tr[j].a,tr[j].b,tr[j].c));
                    //printf(" i = %d (%d %d %d)\n",i, tr[i].a, tr[i].b, tr[i].c);        
                   swap_int(&tr[i].a,&tr[j].a);
                   swap_int(&tr[i].b,&tr[j].b);
                   swap_int(&tr[i].c,&tr[j].c);
                   //printf(" i = %d (%d %d %d) end\n",i, tr[i].a, tr[i].b, tr[i].c);
                   break;
                }
            }

        
        }
/*
    printf("\n dimensions = ");
    for (int i = 0; i < n; i++)
    {
        printf("%d %d %d\n", tr[i].a, tr[i].b, tr[i].c);
    }
 */   

    }
    

}

int main()
{
	int n;
	scanf("%d", &n);
	triangle *tr = malloc(n * sizeof(triangle));
	for (int i = 0; i < n; i++) {
		scanf("%d%d%d", &tr[i].a, &tr[i].b, &tr[i].c);
	}
	sort_by_area(tr, n);
	for (int i = 0; i < n; i++) {
		printf("%d %d %d\n", tr[i].a, tr[i].b, tr[i].c);
	}
	return 0;
}
